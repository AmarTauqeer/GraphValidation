[{"/home/amar/D/Projects/GraphValidation/graph-validation/src/index.js":"1","/home/amar/D/Projects/GraphValidation/graph-validation/src/App.js":"2","/home/amar/D/Projects/GraphValidation/graph-validation/src/reportWebVitals.js":"3","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/Index.js":"4","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/Index.js":"5","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/PersonForm.js":"6","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/customFunctions/Index.js":"7","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetTempData.js":"8","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetYandexData.js":"9","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/FetchGooglePlaceDetail.js":"10","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetOpenData.js":"11","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/person-helper-functions/index.js":"12","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/customFunctions/GetDataFromHotel.js":"13","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/HotelData.js":"14","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetAddressConfidence.js":"15","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetPhoneConfidence.js":"16","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetNameConfidence.js":"17","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/core/Credentials.js":"18","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/person-helper-functions/GetDbPediaData.js":"19","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/person-helper-functions/GetWikiData.js":"20","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/customFunctions/GetDataFromWikidata.js":"21","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/customFunctions/GetDataFromDbPedia.js":"22","/home/amar/D/Projects/GraphValidation/graph-validation/src/data/data.js":"23"},{"size":500,"mtime":499169700000,"results":"24","hashOfConfig":"25"},{"size":286,"mtime":1624442978000,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499169700000,"results":"27","hashOfConfig":"25"},{"size":217,"mtime":1624372420000,"results":"28","hashOfConfig":"25"},{"size":18686,"mtime":1624616364000,"results":"29","hashOfConfig":"25"},{"size":15182,"mtime":1626517816068,"results":"30","hashOfConfig":"25"},{"size":6460,"mtime":1624616252000,"results":"31","hashOfConfig":"25"},{"size":4348,"mtime":1624356512000,"results":"32","hashOfConfig":"25"},{"size":1861,"mtime":1623958116000,"results":"33","hashOfConfig":"25"},{"size":2289,"mtime":1623956702000,"results":"34","hashOfConfig":"25"},{"size":7160,"mtime":1623958002000,"results":"35","hashOfConfig":"25"},{"size":2663,"mtime":1626456106643,"results":"36","hashOfConfig":"25"},{"size":489,"mtime":1616337296000,"results":"37","hashOfConfig":"25"},{"size":2988,"mtime":1624357450000,"results":"38","hashOfConfig":"25"},{"size":1781,"mtime":1623959764000,"results":"39","hashOfConfig":"25"},{"size":1574,"mtime":1623959614000,"results":"40","hashOfConfig":"25"},{"size":1602,"mtime":1623960716000,"results":"41","hashOfConfig":"25"},{"size":309,"mtime":1623960308000,"results":"42","hashOfConfig":"25"},{"size":1001,"mtime":1626451371438,"results":"43","hashOfConfig":"25"},{"size":1093,"mtime":1626430629039,"results":"44","hashOfConfig":"25"},{"size":493,"mtime":1624616108000,"results":"45","hashOfConfig":"25"},{"size":511,"mtime":1624979088000,"results":"46","hashOfConfig":"25"},{"size":3210940,"mtime":1607965364000,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1u7ghu8",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/home/amar/D/Projects/GraphValidation/graph-validation/src/index.js",[],["102","103"],"/home/amar/D/Projects/GraphValidation/graph-validation/src/App.js",["104"],"import Places from \"./components/places-hotels/Index\";\nimport PersonValidator from \"./components/person-validator/Index\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <PersonValidator />\n      <br />\n      {/* <Places /> */}\n    </div>\n  );\n}\n\nexport default App;\n","/home/amar/D/Projects/GraphValidation/graph-validation/src/reportWebVitals.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/Index.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/Index.js",["105","106","107","108","109","110","111","112","113","114"],"import React, { Fragment, useState } from \"react\";\r\n\r\nimport {\r\n  fetchGooglePlace,\r\n  fetchOpenPlaceDetail,\r\n  fetchYendaxPlaceDetail,\r\n  fetchHotelPlaceDetail,\r\n  fetchNameConfidence,\r\n  fetchPhoneConfidence,\r\n  fetchAddressConfidence,\r\n} from \"./customFunctions/Index\";\r\nimport GetTempData from \"./helperFunctions/GetTempData\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport SearchImage from \"../../images/search.png\";\r\nimport AddImage from \"../../images/add.png\";\r\n\r\nconst Index = () => {\r\n  // array to store the detail part\r\n  const [data, setData] = useState([]);\r\n  const [counter, setCounter] = useState(1);\r\n  // array for dynamically add/remove and handling input fields\r\n  const [inputFields, setInputFields] = useState([\r\n    {\r\n      id: uuidv4(),\r\n      subject: \"\",\r\n      predicate: \"name\",\r\n      object: \"\",\r\n      disabled: true,\r\n    },\r\n  ]);\r\n  // hook for instance confidence\r\n  const [instanceConfidence, setInstanceConfidence] = useState(0.0);\r\n  // hooks for manual confidence selection by user\r\n  const [state, setState] = React.useState({\r\n    googleWeight: 0.4,\r\n    openWeight: 0.3,\r\n    yandexWeight: 0.3,\r\n  });\r\n\r\n  // handle change input of manual assigning weights\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    setState({\r\n      ...state,\r\n      [event.target.name]: value,\r\n    });\r\n  };\r\n\r\n  // handle change input fields\r\n  const handleChangeInput = (id, event) => {\r\n    const newInputFields = inputFields.map((i) => {\r\n      if (id === i.id) {\r\n        i[event.target.name] = event.target.value;\r\n      }\r\n      return i;\r\n    });\r\n    setInputFields(newInputFields);\r\n  };\r\n  // add dynamically input fields\r\n  const handleAddFields = () => {\r\n    let name = inputFields[0].subject;\r\n    if (name !== \"\") {\r\n      let tempCounter = counter + 1;\r\n      setCounter(tempCounter);\r\n      if (counter <= 2) {\r\n        setInputFields([\r\n          ...inputFields,\r\n          {\r\n            id: uuidv4(),\r\n            subject: inputFields[0].subject,\r\n            predicate: \"phone\",\r\n            object: \"\",\r\n            disabled: false,\r\n          },\r\n        ]);\r\n      } else {\r\n        alert(\"Only three properties allowed!\");\r\n      }\r\n    } else {\r\n      alert(\"Please select subject first\");\r\n    }\r\n  };\r\n  // remove dynamically input fields\r\n  const handleRemoveFields = (id, subject) => {\r\n    if (inputFields.length > 1) {\r\n      const values = [...inputFields];\r\n      values.splice(\r\n        values.findIndex((value) => value.id === id),\r\n        1\r\n      );\r\n      setInputFields(values);\r\n      setCounter(1);\r\n      // call search button\r\n      if (data.length > 1) {\r\n        const values = [...data];\r\n        values.splice(\r\n          values.findIndex((value) => value.id === id),\r\n          1\r\n        );\r\n        setData(values);\r\n      }\r\n    }\r\n  };\r\n  // search\r\n  const handleButtonClick = async (place, event) => {\r\n    event.preventDefault();\r\n    var tempPlaceData = [];\r\n\r\n    // get the value of current subject/place name\r\n    const subject = inputFields[0].subject;\r\n    if (subject === \"\" || subject === undefined) {\r\n      alert(\"Subject field is required.\");\r\n      return false;\r\n    }\r\n    // check total weights\r\n    let totalWeight =\r\n      Number(state.googleWeight) +\r\n      Number(state.openWeight) +\r\n      Number(state.yandexWeight);\r\n    totalWeight = Math.ceil(totalWeight);\r\n    if (totalWeight !== 1) {\r\n      alert(\"Sum of assigning weights should be 1!\");\r\n      return false;\r\n    }\r\n\r\n    // place name with confidence\r\n    if (place) {\r\n      // hotel\r\n      // let hotelPlaceData = await fetchHotelPlaceDetail(place, inputFields);\r\n      // tempPlaceData = [\r\n      //   ...tempPlaceData,\r\n      //   {\r\n      //     dataSource: \"Hotel\",\r\n      //     name: hotelPlaceData[0].name,\r\n      //     phone: hotelPlaceData[0].phone,\r\n      //     phone_from_db: hotelPlaceData[0].phone_from_db,\r\n      //     address: hotelPlaceData[0].address,\r\n      //     address_from_db: hotelPlaceData[0].address_from_db,\r\n      //     latitude:hotelPlaceData[0].latitude,\r\n      //     longitude:hotelPlaceData[0].longitude\r\n      //   },\r\n      // ];\r\n      // let lat_param=tempPlaceData[0].latitude;\r\n      // let log_param=tempPlaceData[0].longitude;\r\n      // let address_param=tempPlaceData[0].address_from_db;\r\n      // let phone_param=tempPlaceData[0].phone_from_db;\r\n      // // google\r\n      // let googlePlaceData = await fetchGooglePlace(place, inputFields,lat_param,log_param,address_param);\r\n      //   tempPlaceData = [\r\n      //     ...tempPlaceData,\r\n      //     {\r\n      //       dataSource: \"Google\",\r\n      //       name: googlePlaceData[0].name,\r\n      //       phone: googlePlaceData[0].phone,\r\n      //       address: googlePlaceData[0].address,\r\n      //       latitude:hotelPlaceData[0].latitude,\r\n      //       longitude:hotelPlaceData[0].longitude\r\n      //     },\r\n      //   ];\r\n      // // open\r\n      // let openPlaceData = await fetchOpenPlaceDetail(place, inputFields);\r\n      //   tempPlaceData = [\r\n      //     ...tempPlaceData,\r\n      //     {\r\n      //       dataSource: \"Open\",\r\n      //       name: openPlaceData[0].name,\r\n      //       phone: openPlaceData[0].phone,\r\n      //       address: openPlaceData[0].address,\r\n      //       latitude:hotelPlaceData[0].latitude,\r\n      //       longitude:hotelPlaceData[0].longitude\r\n      //     },\r\n      //   ];\r\n      // // yendax\r\n      // let yendaxPlaceData = await fetchYendaxPlaceDetail(place, inputFields,lat_param,log_param,phone_param);\r\n      //   tempPlaceData = [\r\n      //     ...tempPlaceData,\r\n      //     {\r\n      //       dataSource: \"Yendax\",\r\n      //       name: yendaxPlaceData[0].name,\r\n      //       phone: yendaxPlaceData[0].phone,\r\n      //       address: yendaxPlaceData[0].address,\r\n      //       latitude:hotelPlaceData[0].latitude,\r\n      //       longitude:hotelPlaceData[0].longitude\r\n      //     },\r\n      //   ];\r\n      // // get phone value\r\n      // let phoneValue = \"\";\r\n      // if (inputFields.length === 2 && inputFields[1].predicate === \"phone\") {\r\n      //   phoneValue = inputFields[1].object;\r\n      // } else if (\r\n      //   inputFields.length === 3 &&\r\n      //   inputFields[1].predicate === \"phone\"\r\n      // ) {\r\n      //   phoneValue = inputFields[1].object;\r\n      // } else if (\r\n      //   inputFields.length === 3 &&\r\n      //   inputFields[2].predicate === \"phone\"\r\n      // ) {\r\n      //   phoneValue = inputFields[2].object;\r\n      // }\r\n      // // get address value\r\n      // let addressValue = \"\";\r\n      // if (inputFields.length === 2 && inputFields[1].predicate === \"address\") {\r\n      //   addressValue = inputFields[1].object;\r\n      // } else if (\r\n      //   inputFields.length === 3 &&\r\n      //   inputFields[1].predicate === \"address\"\r\n      // ) {\r\n      //   addressValue = inputFields[1].object;\r\n      // } else if (\r\n      //   inputFields.length === 3 &&\r\n      //   inputFields[2].predicate === \"address\"\r\n      // ) {\r\n      //   addressValue = inputFields[2].object;\r\n      // }\r\n      // // compute confidence for name\r\n      // let nameConfidence = 0.0;\r\n      // let phoneConfidence = 0.0;\r\n      // let addressConfidence = 0.0;\r\n      // nameConfidence = await fetchNameConfidence(tempPlaceData, place, state);\r\n      // phoneConfidence = await fetchPhoneConfidence(\r\n      //   tempPlaceData,\r\n      //   phoneValue,\r\n      //   state\r\n      // );\r\n      // addressConfidence = await fetchAddressConfidence(\r\n      //   tempPlaceData,\r\n      //   addressValue,\r\n      //   state\r\n      // );\r\n      // let tempData = GetTempData();\r\n      // console.log(tempData);\r\n      // place\r\n      // let instanceScore=0.0;\r\n      // // instance confidence score\r\n      // if (tempData.length==2 && tempData[1].validationProperty===\"Phone\") {\r\n      //   instanceScore=(nameConfidence+phoneConfidence)/2;\r\n      // }\r\n      // if(tempData.length==2 && tempData[1].validationProperty===\"Address\")\r\n      // {\r\n      //   instanceScore=(nameConfidence+addressConfidence)/2;\r\n      // }\r\n      // if(tempData.length===3)\r\n      // {\r\n      //   instanceScore=(nameConfidence+phoneConfidence+addressConfidence)/3;\r\n      // }\r\n      // if(tempData.length===1){\r\n      //   instanceScore=nameConfidence;\r\n      // }\r\n      // //console.log(instanceScore);\r\n      // setInstanceConfidence(instanceScore);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <h2\r\n        style={{ textAlign: \"center\", marginTop: \"50px\", marginBottom: \"50px\" }}\r\n      >\r\n        Knowledge Graph Validator\r\n      </h2>\r\n      <h4>Places</h4>\r\n      <hr />\r\n      <div className=\"row\">\r\n        <div>\r\n          <button\r\n            className=\"btn btn-seconday\"\r\n            type=\"button\"\r\n            onClick={handleAddFields}\r\n          >\r\n            <p>\r\n              <img src={AddImage} width=\"40px\" height=\"40px\" alt=\"add more\" />\r\n              <br />\r\n              add more\r\n            </p>\r\n          </button>\r\n        </div>\r\n        <div>\r\n          {inputFields.map((inputField, index) => {\r\n            return (\r\n              <div className=\"row\" key={index}>\r\n                <div className=\"col-md-4\">\r\n                  {inputFields.length === 1 ? (\r\n                    <div className=\"form-group form-group-lg\">\r\n                      <input\r\n                        name=\"subject\"\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={inputField.subject}\r\n                        style={{ height: \"40px\" }}\r\n                        onChange={(event) =>\r\n                          handleChangeInput(inputField.id, event)\r\n                        }\r\n                        placeholder=\"KG-ID\"\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"form-group form-group-lg\">\r\n                      <input\r\n                        name=\"subject\"\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={inputField.subject}\r\n                        style={{ height: \"40px\" }}\r\n                        onChange={(event) =>\r\n                          handleChangeInput(inputField.id, event)\r\n                        }\r\n                        disabled\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                  <div className=\"form-group form-group-lg\">\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"predicate\"\r\n                      value={inputField.predicate}\r\n                      onChange={(event) =>\r\n                        handleChangeInput(inputField.id, event)\r\n                      }\r\n                      style={{ height: \"40px\" }}\r\n                      disabled={inputField.disabled}\r\n                    >\r\n                      <option defaultValue=\"name\">Name</option>\r\n                      <option value=\"phone\">Phone</option>\r\n                      <option value=\"address\">Address</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  {inputFields.length !== 1 &&\r\n                  inputField.predicate !== \"name\" ? (\r\n                    <div className=\"form-group form-group-lg\">\r\n                      <input\r\n                        name=\"object\"\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={inputField.object}\r\n                        disabled={inputField.disabled}\r\n                        onChange={(event) =>\r\n                          handleChangeInput(inputField.id, event)\r\n                        }\r\n                        placeholder=\"Phone/Address\"\r\n                        style={{ height: \"40px\" }}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"form-group form-group-lg\">\r\n                      <input\r\n                        name=\"object\"\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        value={inputField.object}\r\n                        disabled={inputField.disabled}\r\n                        onChange={(event) =>\r\n                          handleChangeInput(inputField.id, event)\r\n                        }\r\n                        placeholder={inputField.subject}\r\n                        style={{ height: \"40px\" }}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  <button\r\n                    className=\"btn btn-outline-danger btn-sm\"\r\n                    style={{ verticalAlign: \"center\", height: \"40px\" }}\r\n                    onClick={() => handleRemoveFields(inputField.id)}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"col-md\">\r\n          <button\r\n            className=\"btn btn-seconday\"\r\n            type=\"submit\"\r\n            onClick={(event) =>\r\n              handleButtonClick(inputFields[0].subject, event)\r\n            }\r\n          >\r\n            <p>\r\n              <img src={SearchImage} width=\"50px\" height=\"40px\" alt=\"search\" />\r\n              <br />\r\n              search\r\n            </p>\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"col-md\">\r\n          <span>\r\n            <b>Weights</b>\r\n          </span>\r\n          <div\r\n            className=\"row\"\r\n            style={{ width: \"150px\", border: \"solid 1px\", color: \"green\" }}\r\n          >\r\n            <div className=\"col-md-5\">\r\n              <label>\r\n                <b>Google</b>\r\n              </label>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"googleWeight\"\r\n                value={state.googleWeight}\r\n                onChange={handleChange}\r\n                style={{\r\n                  width: \"50px\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-5\">\r\n              <label>\r\n                <b>OSM</b>\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"col-md-2\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"openWeight\"\r\n                value={state.openWeight}\r\n                onChange={handleChange}\r\n                style={{\r\n                  width: \"50px\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-5\">\r\n              <label>\r\n                <b>Yandex</b>\r\n              </label>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"yandexWeight\"\r\n                value={state.yandexWeight}\r\n                onChange={handleChange}\r\n                style={{\r\n                  width: \"50px\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <br />\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className=\"row\"\r\n        style={{\r\n          backgroundColor: \"#ff8000\",\r\n          color: \"white\",\r\n          height: \"50px\",\r\n          textAlign: \"center\",\r\n          alignContent: \"center\",\r\n          fontSize: \"18px\",\r\n        }}\r\n      >\r\n        <div className=\"col-md-2\">Property Name</div>\r\n        <div className=\"col-md-2\">KG</div>\r\n        <div className=\"col-md-2\">Google Places</div>\r\n        <div className=\"col-md-2\">Open Street Map</div>\r\n        <div className=\"col-md-2\">Yandex Places</div>\r\n        <div className=\"col-md-2\">Confidence</div>\r\n      </div>\r\n      {data.map((a, index) => {\r\n        return (\r\n          <Fragment>\r\n            <div className=\"row\" key={index} style={{ border: \"solid 1px\" }}>\r\n              <div className=\"col-md-2\">\r\n                <b>{a.validationProperty}</b>\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                {a.nameHotel\r\n                  ? a.nameHotel\r\n                  : a.phoneHotel\r\n                  ? a.phoneHotel\r\n                  : a.addressHotel\r\n                  ? a.addressHotel\r\n                  : \"\"}\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                {a.nameGoogle\r\n                  ? a.nameGoogle\r\n                  : a.phoneGoogle\r\n                  ? a.phoneGoogle\r\n                  : a.addressGoogle\r\n                  ? a.addressGoogle\r\n                  : \"\"}\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                {a.nameOpen\r\n                  ? a.nameOpen\r\n                  : a.phoneOpen\r\n                  ? a.phoneOpen\r\n                  : a.addressOpen\r\n                  ? a.addressOpen\r\n                  : \"\"}\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                {a.nameYendax\r\n                  ? a.nameYendax\r\n                  : a.phoneYendax\r\n                  ? a.phoneYendax\r\n                  : a.addressYendax\r\n                  ? a.addressYendax\r\n                  : \"\"}\r\n              </div>\r\n              <div\r\n                className=\"col-md-2\"\r\n                style={{\r\n                  textAlign: \"center\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"green\",\r\n                }}\r\n              >\r\n                <p>\r\n                  {a.confidenceName\r\n                    ? a.confidenceName\r\n                    : a.confidencePhone\r\n                    ? a.confidencePhone\r\n                    : a.confidenceAddress\r\n                    ? a.confidenceAddress\r\n                    : 0}{\" \"}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </Fragment>\r\n        );\r\n      })}\r\n      <div className=\"row\" style={{ border: \"solid 1px\" }}>\r\n        <div className=\"col-md-2\"></div>\r\n        <div className=\"col-md-2\"></div>\r\n        <div className=\"col-md-2\"></div>\r\n        <div className=\"col-md-2\"></div>\r\n        <div className=\"col-md-2\"></div>\r\n        <div\r\n          className=\"col-md-2\"\r\n          style={{\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\",\r\n            color: \"blue\",\r\n          }}\r\n        >\r\n          <p>{instanceConfidence === 0 ? \"\" : instanceConfidence.toFixed(1)}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Index;\r\n","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/PersonForm.js",["115","116","117","118","119","120","121","122"],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/customFunctions/Index.js",["123","124","125","126","127","128","129"],"import axios from \"axios\";\r\nimport data from \"../../../data/data\";\r\nimport { googleKey, yandexKey } from \"../../core/Credentials\";\r\n// graphdb related functions\r\nimport GetDataFromHotel from \"./GetDataFromHotel\";\r\nimport FetchGooglePlaceDetail from \"../helperFunctions/FetchGooglePlaceDetail\";\r\n// helper functions\r\nimport GetOpenData from \"../helperFunctions/GetOpenData\";\r\nimport GetYandexData from \"../helperFunctions/GetYandexData\";\r\nimport GetNameConfidence from \"../helperFunctions/GetNameConfidence\";\r\nimport GetPhoneConfidence from \"../helperFunctions/GetPhoneConfidence\";\r\nimport GetAddressConfidence from \"../helperFunctions/GetAddressConfidence\";\r\nimport HotelData from \"../helperFunctions/HotelData\";\r\n\r\n// google place\r\nconst fetchGooglePlace = async (\r\n  place,\r\n  inputFields,\r\n  lat_param,\r\n  log_param,\r\n  address_param\r\n) => {\r\n  console.log(lat_param + log_param + address_param + place);\r\n  let googleCredentials = googleKey();\r\n  var googlePlace = [];\r\n  if (place) {\r\n    const result = await axios.get(\r\n      `https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=%${place} ${address_param}%&inputtype=textquery&fields=name,business_status,formatted_address,place_id,geometry&locationbias=circle:2000@${lat_param},${log_param}&key=${googleCredentials}`\r\n    );\r\n    //console.log(result);\r\n    if (result.data.status !== \"ZERO_RESULTS\") {\r\n      const fetchData = result.data.candidates[0];\r\n      const placeId = fetchData.place_id;\r\n      const address = fetchData.formatted_address;\r\n      if (!placeId) {\r\n        console.log(\"place id is not exist\");\r\n      } else {\r\n        googlePlace = await FetchGooglePlaceDetail(\r\n          placeId,\r\n          inputFields,\r\n          address,\r\n          googleCredentials\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return await googlePlace;\r\n};\r\n\r\n// openstreetmap\r\nconst fetchOpenPlaceDetail = async (place, inputFields) => {\r\n  //let openCredentails=OpenKey();\r\n  let openData = [];\r\n  var name = \"Record not found.\";\r\n  if (data) {\r\n    data.map((i, index) => {\r\n      return (\r\n        <li key={index}>\r\n          {i.tags.name !== undefined\r\n            ? i.tags.name === place\r\n              ? (name = i.tags.name)\r\n              : \"\"\r\n            : \"\"}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n  openData = GetOpenData(place, inputFields, name, data);\r\n  return openData;\r\n};\r\n\r\n// yendax\r\nconst fetchYendaxPlaceDetail = async (\r\n  place,\r\n  inputFields,\r\n  lat_param,\r\n  log_param,\r\n  phone_param\r\n) => {\r\n  let yandexCredentails = yandexKey();\r\n  //console.log(phone_param);\r\n  const result = await axios(\r\n    `https://search-maps.yandex.ru/v1/?text=${phone_param}&ll=${lat_param},${log_param}&type=biz&lang=en_US&apikey=${yandexCredentails}`\r\n  );\r\n  //console.log(result.data);\r\n\r\n  let name = result.data.features[0].properties.name;\r\n  let phone = \"Record not found\";\r\n  let address = \"Record not found\";\r\n  if (result.data.features[0].properties.CompanyMetaData.Phones) {\r\n    let phoneStr =\r\n      result.data.features[0].properties.CompanyMetaData.Phones[0].formatted;\r\n    phone = phoneStr.replace(/\\s/g, \"\");\r\n  }\r\n  if (result.data.features[0].properties.CompanyMetaData.address) {\r\n    address = result.data.features[0].properties.CompanyMetaData.address;\r\n  }\r\n\r\n  let yandexData = [];\r\n  yandexData = GetYandexData(\r\n    place,\r\n    inputFields,\r\n    lat_param,\r\n    log_param,\r\n    phone_param,\r\n    name,\r\n    address,\r\n    phone\r\n  );\r\n  return yandexData;\r\n};\r\n\r\n// hotel\r\nconst fetchHotelPlaceDetail = async (place, inputFields) => {\r\n  // endpoint url and query for hotel dataset\r\n  const endpointUrlHotel =\r\n    \"http://172.16.44.133:7200/repositories/TirolGraph-Alpha\";\r\n  const sparqlQueryHotel = `PREFIX rdfs:<http://schema.org/>\r\n  PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n  PREFIX dc:<http://purl.org/dc/terms/>select distinct ?name ?latitude ?longitude ?email ?url ?addressCountry ?addressRegion ?addressLocality ?streetAddress ?postalCode ?phone ?loc ?add ?contact\r\n  where{\r\n      ?s a rdfs:Hotel .\r\n      ?s rdfs:name ?name .\r\n      ?s rdfs:url ?url .\r\n      ?s rdfs:email ?email .\r\n      ?s rdfs:location ?loc .\r\n      ?loc rdfs:geo ?geo .\r\n      ?geo rdfs:longitude ?longitude .\r\n      ?geo rdfs:latitude ?latitude .\r\n      ?loc rdfs:address ?add .\r\n      ?add rdfs:addressCountry ?addressCountry .\r\n      ?add rdfs:addressRegion ?addressRegion .\r\n      ?add rdfs:addressLocality ?addressLocality .\r\n      ?add rdfs:streetAddress ?streetAddress .\r\n      ?add rdfs:postalCode ?postalCode .\r\n      ?s rdfs:contactPoint ?contact .\r\n      ?contact rdfs:telephone ?phone .\r\n\r\n      FILTER(lang(?name) = 'en')\r\n      FILTER regex(?name ,\"${place}\") .\r\n  }\r\n  `;\r\n  const queryDispatcherHotel = new GetDataFromHotel(endpointUrlHotel);\r\n\r\n  let hotelData = [];\r\n  let name = \"Record not found.\";\r\n  let phone = \"Record not found.\";\r\n  let address = \"Record not found.\";\r\n  let address_from_db = \"Record not found.\";\r\n  let latitude = \"Record not found.\";\r\n  let longitude = \"Record not found.\";\r\n  let phone_from_db = \"Record not found.\";\r\n\r\n  await queryDispatcherHotel.query(sparqlQueryHotel).then((res) => {\r\n    //console.log(res.results.bindings);\r\n    if (res.results.bindings.length >= 1) {\r\n      name = res.results.bindings[0].name.value;\r\n      latitude = res.results.bindings[0].latitude.value;\r\n      longitude = res.results.bindings[0].longitude.value;\r\n      phone = res.results.bindings[0].phone.value;\r\n      phone_from_db = res.results.bindings[0].phone.value;\r\n      address = res.results.bindings[0].streetAddress.value;\r\n      address_from_db = res.results.bindings[0].streetAddress.value;\r\n      //url = res.results.bindings[0].url.value;\r\n    }\r\n  });\r\n  hotelData = HotelData(inputFields);\r\n  console.log(hotelData);\r\n};\r\n\r\n// compute confidence name\r\nconst fetchNameConfidence = (data, place, state) => {\r\n  let nameConfidence = GetNameConfidence(data, place, state);\r\n  return nameConfidence;\r\n};\r\nconst fetchPhoneConfidence = (data, phone, state) => {\r\n  let phoneConfidence = GetPhoneConfidence(data, phone, state);\r\n  return phoneConfidence;\r\n};\r\n\r\nconst fetchAddressConfidence = (data, address, state) => {\r\n  let addressConfidence = GetAddressConfidence(data, address, state);\r\n  return addressConfidence;\r\n};\r\nexport {\r\n  fetchGooglePlace,\r\n  fetchOpenPlaceDetail,\r\n  fetchYendaxPlaceDetail,\r\n  fetchHotelPlaceDetail,\r\n  fetchNameConfidence,\r\n  fetchPhoneConfidence,\r\n  fetchAddressConfidence,\r\n};\r\n","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetTempData.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetYandexData.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/FetchGooglePlaceDetail.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetOpenData.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/person-helper-functions/index.js",["130"],"import GetWikiData from \"../person-helper-functions/GetWikiData\";\r\nimport GetDbPediaData from \"../person-helper-functions/GetDbPediaData\";\r\n\r\nconst computeConfidence = (data, weightWiki, weightDbPedia) => {\r\n  let confidence = [];\r\n  for (let i = 0; i < data.length; i++) {\r\n    const element = data[i];\r\n    // // wiki data\r\n    // if (element.wiki_status === \"found\") {\r\n    //   let data = {\r\n    //     givenName: element.givenName,\r\n    //     dob: element.dob,\r\n    //     placeOfBirth: element.placeOfBirth,\r\n    //     confidence: weightWiki,\r\n    //     wiki: \"true\",\r\n    //     dbpedia: \"false\",\r\n    //   };\r\n    //   confidence.push(data);\r\n    // }\r\n    // dbpedia data\r\n    if (element.dbpedia_status === \"found\") {\r\n      let data = {\r\n        givenName: element.givenName,\r\n        dob: element.dob,\r\n        //placeOfBirth: element.placeOfBirth,\r\n        confidence: weightDbPedia,\r\n        wiki: \"false\",\r\n        dbpedia: \"true\",\r\n        person:element.person\r\n        \r\n      };\r\n      confidence.push(data);\r\n    }\r\n  }\r\n  return confidence;\r\n};\r\nconst getData = async (graphData) => {\r\n  let resp = graphData;\r\n  let arr = [];\r\n  if (resp) {\r\n    // validation from wiki and dbpedia\r\n    for (let i = 0; i < resp.length; i++) {\r\n      let givenName = resp[i].givenName;\r\n      let birthDate = resp[i].birthDate;\r\n      let placeOfBirth = resp[i].placeOfBirth;\r\n      console.log(birthDate)\r\n      // get wiki data using sparql\r\n      // const wikiData = await GetWikiData(givenName, birthDate, placeOfBirth);\r\n      // if (wikiData.length > 0) {\r\n      //   let dateOfbirth = wikiData[0].year[\"value\"];\r\n      //   arr = [\r\n      //     ...arr,\r\n      //     {\r\n      //       givenName: wikiData[0].birthName[\"value\"],\r\n      //       dob:dateOfbirth,\r\n      //       //dob: dateOfbirth.substring(0, 10),\r\n      //       //placeOfBirth: wikiData[0].placeOfBirth[\"value\"],\r\n      //       wiki_status: \"found\",\r\n      //       dbpedia_status: \"\",\r\n      //     },\r\n      //   ];\r\n      // }\r\n      // get dbpedia data using sparql\r\n      const dbpediaData = await GetDbPediaData(\r\n        givenName,\r\n        birthDate,\r\n        placeOfBirth\r\n      );\r\n      if (dbpediaData.length > 0) {\r\n        arr = [\r\n          ...arr,\r\n          {\r\n            givenName: dbpediaData[0].name[\"value\"],\r\n            dob: dbpediaData[0].birthDate[\"value\"],\r\n            //placeOfBirth: dbpediaData[0].birthPlace[\"value\"],\r\n            wiki_status: \"\",\r\n            dbpedia_status: \"found\",\r\n            person:dbpediaData[0].person[\"value\"],\r\n          },\r\n        ];\r\n      }\r\n    }\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport { computeConfidence, getData };\r\n","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/customFunctions/GetDataFromHotel.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/HotelData.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetAddressConfidence.js",["131"],"const GetAddressConfidence = async (data, address, state) => {\r\n    let confidence = 0.0;\r\n    let confidenceGoogle = 0.0;\r\n    let confidenceOpen = 0.0;\r\n    let confidenceYendax = 0.0;\r\n    {\r\n      data.map((d) => {\r\n        // confidence google\r\n        //console.log(address.includes(d.address));\r\n        if (d.dataSource === \"Google\" && d.address.includes(address) === true) {\r\n          confidenceGoogle = Number(state.googleWeight);\r\n        }\r\n  \r\n        // confidence open\r\n        if (d.dataSource === \"Open\" && d.address.includes(address) === true) {\r\n          confidenceOpen = Number(state.openWeight);\r\n        }\r\n  \r\n        // confidence yendax\r\n        if (d.dataSource === \"Yendax\" && d.address.includes(address) === true) {\r\n          confidenceYendax = Number(state.yandexWeight);\r\n        }\r\n        return <div>&nbsp;</div>;\r\n      });\r\n  \r\n      if (\r\n        confidenceGoogle !== 0.0 &&\r\n        confidenceOpen !== 0.0 &&\r\n        confidenceYendax !== 0.0\r\n      ) {\r\n        confidence = confidenceGoogle + confidenceOpen + confidenceYendax;\r\n      } else if (confidenceGoogle !== 0.0 && confidenceOpen !== 0.0) {\r\n        confidence = confidenceGoogle + confidenceOpen;\r\n      } else if (confidenceGoogle !== 0.0 && confidenceYendax !== 0.0) {\r\n        confidence = confidenceGoogle + confidenceYendax;\r\n      } else if (confidenceOpen !== 0.0 && confidenceYendax !== 0.0) {\r\n        confidence = confidenceOpen + confidenceYendax;\r\n      } else if (confidenceGoogle !== 0.0) {\r\n        confidence = confidenceGoogle;\r\n      } else if (confidenceOpen !== 0.0) {\r\n        confidence = confidenceOpen;\r\n      } else {\r\n        confidence = confidenceYendax;\r\n      }\r\n  \r\n      return await confidence;\r\n    }\r\n  };\r\n  export default GetAddressConfidence","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetPhoneConfidence.js",["132"],"const GetPhoneConfidence = async (data, phone, state) => {\r\n  let confidence = 0.0;\r\n  let confidenceGoogle = 0.0;\r\n  let confidenceOpen = 0.0;\r\n  let confidenceYendax = 0.0;\r\n  {\r\n    data.map((d) => {\r\n      // confidence google\r\n      if (d.dataSource === \"Google\" && phone === d.phone) {\r\n        confidenceGoogle = Number(state.googleWeight);\r\n      }\r\n\r\n      // confidence open\r\n      if (d.dataSource === \"Open\" && phone === d.phone) {\r\n        confidenceOpen = Number(state.openWeight);\r\n      }\r\n\r\n      // confidence yendax\r\n      if (d.dataSource === \"Yendax\" && phone === d.phone) {\r\n        confidenceYendax = Number(state.yandexWeight);\r\n      }\r\n      return <div>&nbsp;</div>;\r\n    });\r\n\r\n    if (\r\n      confidenceGoogle !== 0.0 &&\r\n      confidenceOpen !== 0.0 &&\r\n      confidenceYendax !== 0.0\r\n    ) {\r\n      confidence = confidenceGoogle + confidenceOpen + confidenceYendax;\r\n    } else if (confidenceGoogle !== 0.0 && confidenceOpen !== 0.0) {\r\n      confidence = confidenceGoogle + confidenceOpen;\r\n    } else if (confidenceGoogle !== 0.0 && confidenceYendax !== 0.0) {\r\n      confidence = confidenceGoogle + confidenceYendax;\r\n    } else if (confidenceOpen !== 0.0 && confidenceYendax !== 0.0) {\r\n      confidence = confidenceOpen + confidenceYendax;\r\n    } else if (confidenceGoogle !== 0.0) {\r\n      confidence = confidenceGoogle;\r\n    } else if (confidenceOpen !== 0.0) {\r\n      confidence = confidenceOpen;\r\n    } else {\r\n      confidence = confidenceYendax;\r\n    }\r\n\r\n    return await confidence;\r\n  }\r\n};\r\nexport default GetPhoneConfidence;\r\n","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/places-hotels/helperFunctions/GetNameConfidence.js",["133"],"const GetNameConfidence = (data, place, state) => {\r\n  let confidence = 0.0;\r\n  let confidenceGoogle = 0.0;\r\n  let confidenceOpen = 0.0;\r\n  let confidenceYendax = 0.0;\r\n\r\n  {\r\n    data.map((d) => {\r\n      // confidence google\r\n      if (d.dataSource === \"Google\" && d.name.includes(place) === true) {\r\n        confidenceGoogle = Number(state.googleWeight);\r\n      }\r\n\r\n      // confidence open\r\n      if (d.dataSource === \"Open\" && d.name.includes(place) === true) {\r\n        confidenceOpen = Number(state.openWeight);\r\n      }\r\n\r\n      // confidence yendax\r\n      if (d.dataSource === \"Yendax\" && d.name.includes(place) === true) {\r\n        confidenceYendax = Number(state.yandexWeight);\r\n      }\r\n      return <div>&nbsp;</div>;\r\n    });\r\n\r\n    if (\r\n      confidenceGoogle !== 0.0 &&\r\n      confidenceOpen !== 0.0 &&\r\n      confidenceYendax !== 0.0\r\n    ) {\r\n      confidence = confidenceGoogle + confidenceOpen + confidenceYendax;\r\n    } else if (confidenceGoogle !== 0.0 && confidenceOpen !== 0.0) {\r\n      confidence = confidenceGoogle + confidenceOpen;\r\n    } else if (confidenceGoogle !== 0.0 && confidenceYendax !== 0.0) {\r\n      confidence = confidenceGoogle + confidenceYendax;\r\n    } else if (confidenceOpen !== 0.0 && confidenceYendax !== 0.0) {\r\n      confidence = confidenceOpen + confidenceYendax;\r\n    } else if (confidenceGoogle !== 0.0) {\r\n      confidence = confidenceGoogle;\r\n    } else if (confidenceOpen !== 0.0) {\r\n      confidence = confidenceOpen;\r\n    } else {\r\n      confidence = confidenceYendax;\r\n    }\r\n    return confidence;\r\n  }\r\n};\r\nexport default GetNameConfidence;\r\n","/home/amar/D/Projects/GraphValidation/graph-validation/src/components/core/Credentials.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/person-helper-functions/GetDbPediaData.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/person-helper-functions/GetWikiData.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/customFunctions/GetDataFromWikidata.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/components/person-validator/customFunctions/GetDataFromDbPedia.js",[],"/home/amar/D/Projects/GraphValidation/graph-validation/src/data/data.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":1,"column":8,"nodeType":"140","messageId":"141","endLine":1,"endColumn":14},{"ruleId":"138","severity":1,"message":"142","line":4,"column":3,"nodeType":"140","messageId":"141","endLine":4,"endColumn":19},{"ruleId":"138","severity":1,"message":"143","line":5,"column":3,"nodeType":"140","messageId":"141","endLine":5,"endColumn":23},{"ruleId":"138","severity":1,"message":"144","line":6,"column":3,"nodeType":"140","messageId":"141","endLine":6,"endColumn":25},{"ruleId":"138","severity":1,"message":"145","line":7,"column":3,"nodeType":"140","messageId":"141","endLine":7,"endColumn":24},{"ruleId":"138","severity":1,"message":"146","line":8,"column":3,"nodeType":"140","messageId":"141","endLine":8,"endColumn":22},{"ruleId":"138","severity":1,"message":"147","line":9,"column":3,"nodeType":"140","messageId":"141","endLine":9,"endColumn":23},{"ruleId":"138","severity":1,"message":"148","line":10,"column":3,"nodeType":"140","messageId":"141","endLine":10,"endColumn":25},{"ruleId":"138","severity":1,"message":"149","line":12,"column":8,"nodeType":"140","messageId":"141","endLine":12,"endColumn":19},{"ruleId":"138","severity":1,"message":"150","line":32,"column":30,"nodeType":"140","messageId":"141","endLine":32,"endColumn":51},{"ruleId":"138","severity":1,"message":"151","line":107,"column":9,"nodeType":"140","messageId":"141","endLine":107,"endColumn":22},{"ruleId":"152","severity":1,"message":"153","line":59,"column":26,"nodeType":"154","messageId":"155","endLine":59,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":59,"column":38,"nodeType":"154","messageId":"155","endLine":59,"endColumn":39},{"ruleId":"152","severity":1,"message":"153","line":59,"column":45,"nodeType":"154","messageId":"155","endLine":59,"endColumn":46},{"ruleId":"152","severity":1,"message":"153","line":62,"column":26,"nodeType":"154","messageId":"155","endLine":62,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":62,"column":43,"nodeType":"154","messageId":"155","endLine":62,"endColumn":44},{"ruleId":"152","severity":1,"message":"153","line":62,"column":50,"nodeType":"154","messageId":"155","endLine":62,"endColumn":51},{"ruleId":"152","severity":1,"message":"153","line":65,"column":26,"nodeType":"154","messageId":"155","endLine":65,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":65,"column":41,"nodeType":"154","messageId":"155","endLine":65,"endColumn":42},{"ruleId":"138","severity":1,"message":"156","line":146,"column":7,"nodeType":"140","messageId":"141","endLine":146,"endColumn":11},{"ruleId":"138","severity":1,"message":"157","line":147,"column":7,"nodeType":"140","messageId":"141","endLine":147,"endColumn":12},{"ruleId":"138","severity":1,"message":"158","line":148,"column":7,"nodeType":"140","messageId":"141","endLine":148,"endColumn":14},{"ruleId":"138","severity":1,"message":"159","line":149,"column":7,"nodeType":"140","messageId":"141","endLine":149,"endColumn":22},{"ruleId":"138","severity":1,"message":"160","line":150,"column":7,"nodeType":"140","messageId":"141","endLine":150,"endColumn":15},{"ruleId":"138","severity":1,"message":"161","line":151,"column":7,"nodeType":"140","messageId":"141","endLine":151,"endColumn":16},{"ruleId":"138","severity":1,"message":"162","line":152,"column":7,"nodeType":"140","messageId":"141","endLine":152,"endColumn":20},{"ruleId":"138","severity":1,"message":"163","line":1,"column":8,"nodeType":"140","messageId":"141","endLine":1,"endColumn":19},{"ruleId":"164","severity":1,"message":"165","line":6,"column":5,"nodeType":"166","messageId":"167","endLine":47,"endColumn":6},{"ruleId":"164","severity":1,"message":"165","line":6,"column":3,"nodeType":"166","messageId":"167","endLine":46,"endColumn":4},{"ruleId":"164","severity":1,"message":"165","line":7,"column":3,"nodeType":"166","messageId":"167","endLine":46,"endColumn":4},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'Places' is defined but never used.","Identifier","unusedVar","'fetchGooglePlace' is defined but never used.","'fetchOpenPlaceDetail' is defined but never used.","'fetchYendaxPlaceDetail' is defined but never used.","'fetchHotelPlaceDetail' is defined but never used.","'fetchNameConfidence' is defined but never used.","'fetchPhoneConfidence' is defined but never used.","'fetchAddressConfidence' is defined but never used.","'GetTempData' is defined but never used.","'setInstanceConfidence' is assigned a value but never used.","'tempPlaceData' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'name' is assigned a value but never used.","'phone' is assigned a value but never used.","'address' is assigned a value but never used.","'address_from_db' is assigned a value but never used.","'latitude' is assigned a value but never used.","'longitude' is assigned a value but never used.","'phone_from_db' is assigned a value but never used.","'GetWikiData' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]